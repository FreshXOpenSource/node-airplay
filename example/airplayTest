#!/usr/local/bin/node

var timeOut = 5000;


//  Make sure you have those images in place

var imageUrl1 = "https://www.google.com/images/srpr/logo4w.png"
var fileEarth="./earth.jpg"
var fileMoon="./moon.jpg"
var fileMars="./mars.jpg"

var argv = require('optimist')
    .usage("Usage: $0 -n [airplay server name]")
    .string('n', 'name')
    .string(['t'])
    .alias("n", "name")
    .alias("t", "timeout")
    .describe("n", "name of airplay server")
    .describe("t", "timeout between images in milliseconds")
    .argv;

var browser = require('airplay').createBrowser();
console.log('Looking for airplay devices');

if(argv.t) {
	timeOut = argv.t;
	console.log('Timeout set to '+timeOut);
}

var timer = setTimeout(function() { console.log('Timed out. Exit.'); browser.stop();} ,timeOut);

function moon(device, x){
	return function(){
        device.showImageFile(fileMoon)
		setTimeout(x, timeOut);
	}
}

function mars(device, x){
	return function(){
        device.showImageFile(fileMars)
		if(x)setTimeout(x, timeOut);
	}
}

function earth(device, x){
	return function(){
        device.showImageFile(fileEarth)
		//device.play(imageUrl1, 0);
		setTimeout(x, timeOut);
	}
}

var pad = function(v) {
    var a = v
    while (a.length < 8) {
        a='0'+a
    }
    return a
}

convertFile = function(filename, id, key, callback)
{
    var fs = require('fs'),
        readStream = fs.createReadStream(filename)
        file = new Buffer(0)
    
    readStream.on('data', function(data){
        file = Buffer.concat([file, data])
    })

    readStream.on('end', function(){
        //Header, basedict with data, info, data start with variable length, length int start with 2    ^2=4 bytes
        var header = new Buffer('62706C6973743030D201020304546461746154696E666F4F12', 'hex')

        var prefix = new Buffer(pad(file.length.toString(16)), 'hex') 
        
        var dict = new Buffer(
            'D205060708526964536B657912' + 
            pad(id.toString(16)) + 
            '12' + 
            pad(key.toString(16))
        , 'hex') //Dict with id, key, int start with 2^2=4 bytes

        var offsetTableOffset = (header.length + prefix.length + file.length + dict.length).toString(16)

        var offsetTableString = pad('08')+pad('0D')+pad('12')+pad('17')

        var offset=file.length
        var offsets=[29,34,37,41,46]
        for (var i in offsets) {
            offsetTableString+=pad((offset+offsets[i]).toString(16))
        }

        var offsetTable = new Buffer(offsetTableString, 'hex')

        //trailer
        var trailer = new Buffer('00000000000004010000000000000009000000000000000000000000' + pad(offsetTableOffset), 'hex')

        var buffer = Buffer.concat([header, prefix, file, dict, offsetTable, trailer])
        
        callback(buffer)

        fs.writeFileSync('out2.plist', buffer)
    })
}

nextFile = function(key, callback)
{
    var crypto = require('crypto')
    var id = crypto.createHash('sha1')
    id.update(fileEarth)
    convertFile(fileEarth, id.digest('hex'), key, callback)
}

function startTimer(){}

browser.on('deviceOnline', function(device){
	console.log('Found Airplay device : device id '+device.id+' / '+device.info_.name);
	if(!(device.info_.name == argv.n || argv.n == undefined)) {
		console.log('\tThis is not my device. Skipping...')
		device.close()
        return
	}

    console.log('\tThis is my device (or no specific device given).')
	clearTimeout(timer)
	console.log('\tName : '+device.info_.name)
	console.log('\tIPs : '+device.info_.addresses)

    device.connectPTTH(function(){
        var series = [
            function(callback){
                device.loadImageFile(fileMoon, {}, callback)                
            },
            function(callback){
                device.loadImageFile(fileMars, {}, callback)                
            },
            function(callback){
                device.loadImageFile(fileEarth, {}, callback)                
            }
        ]

        var async = require("async")
        async.series(series, function(err, res){
            console.log("Uplaod done. Start playlist")
            device.connectSS(nextFile, function(){
                device.startSlideshow(function(res){
                    console.log("Start playlist done")
                })
            }) 
        })

	    // var loop = function(){	
	    // 	earth(device, moon(device, mars(device, loop)))()
	    // }
	    // loop()
   })
});

browser.start();
